[package]
name = "pyri_state"
version = "0.4.0"
edition = "2024"
description = "A flexible `bevy_state` alternative"
repository = "https://github.com/benfrankel/pyri_state"
license = "MIT OR Apache-2.0"
keywords = ["ecs", "game", "bevy"]
categories = ["game-engines", "data-structures"]

[features]
# All features are enabled by default.
default = [
    "bevy_app",
    "bevy_reflect",
    "bevy_state",
    "debug",
    "react",
    "sequence",
    "split",
    "stack",
]
# Enable plugins and `App` extension traits.
bevy_app = ["dep:bevy_app", "pyri_state_derive/bevy_app"]
# Derive `Reflect` for the types in this crate.
bevy_reflect = ["dep:bevy_reflect", "bevy_ecs/bevy_reflect"]
# Enable the `BevyState` wrapper type for ecosystem compatibility.
bevy_state = ["dep:bevy_state", "pyri_state_derive/bevy_state"]
# Enable state debugging tools (e.g. on-flush logging).
debug = ["dep:bevy_diagnostic", "dep:bevy_log", "pyri_state_derive/debug"]
# Enable reaction components such as `DespawnOnExitState`.
react = ["dep:bevy_render", "pyri_state_derive/react"]
# Enable the `NextStateIndex` next state type.
sequence = []
# Enable the `SplitState` code organization tool.
split = []
# Enable the `NextStateStack` next state type.
stack = []

[dependencies]
bevy_app = { version = "0.16", default-features = false, optional = true }
bevy_diagnostic = { version = "0.16", default-features = false, optional = true }
bevy_ecs = { version = "0.16", default-features = false }
bevy_log = { version = "0.16", default-features = false, optional = true }
bevy_reflect = { version = "0.16", default-features = false, optional = true }
bevy_render = { version = "0.16", default-features = false, optional = true }
bevy_state = { version = "0.16", default-features = false, features = [
    "bevy_app",
], optional = true }
pyri_state_derive = { version = "=0.4.1", path = "derive" }
tiny_bail = "0.4"

[dev-dependencies]
bevy = { version = "0.16", default-features = false, features = [
    "bevy_core_pipeline",
    "bevy_log",
    "bevy_winit",
    "x11",
    "multi_threaded",
] }
iyes_progress = "0.14"

[lints.rust]
missing_docs = "deny"
# Mark `bevy_lint` as a valid `cfg` for when `bevy_lint` runs.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(bevy_lint)"] }

[lints.clippy]
too_many_arguments = "allow"
type_complexity = "allow"
std_instead_of_core = "warn"
std_instead_of_alloc = "warn"
alloc_instead_of_core = "warn"

# See more Bevy lints here: <https://thebevyflock.github.io/bevy_cli/bevy_lint/lints>.
[package.metadata.bevy_lint]
restriction = "warn"
pedantic = "warn"
